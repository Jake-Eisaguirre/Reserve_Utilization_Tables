---
title: "reserve_utl"
format: html
editor: source
---

```{r}
if (!require(librarian)){
  install.packages("librarian")
  library(librarian)
}

# librarian downloads, if not already downloaded, and reads in needed packages
librarian::shelf(tidyverse, here, DBI, odbc, padr)

```

```{r}
raw_date <- Sys.Date()

previous_bid_period <- substr(as.character((raw_date - 30)), 1, 7)

update_dt_rlv <- paste0(substr(as.character((raw_date - 60)), 1, 7), "-25 00:00:00")

```


```{r}
tryCatch({
    db_connection <- DBI::dbConnect(odbc::odbc(),
                             Driver="SnowflakeDSIIDriver",
                             Server="hawaiianair.west-us-2.azure.snowflakecomputing.com",
                             WAREHOUSE="DATA_LAKE_READER",
                             Database="ENTERPRISE",
                             UID= Sys.getenv("UID"), 
                             authenticator = "externalbrowser")
    print("Database Connected!")
    },
    error=function(cond) {
            print("Unable to connect to Database.")
})

# Set search_path
dbExecute(db_connection, "USE SCHEMA CREW_ANALYTICS")


q_bid_periods <- "SELECT DISTINCT BID_PERIOD FROM CT_MASTER_HISTORY ORDER BY BID_PERIOD DESC;"
bid_periods <- dbGetQuery(db_connection, q_bid_periods) %>% 
  filter(BID_PERIOD >= "2023-01",
         BID_PERIOD <= "2024-10")



# q_master_history <- paste0("select * from CT_MASTER_HISTORY")
# 
# 
# master_history_raw <- dbGetQuery(db_connection, q_master_history)

```

```{r}

utl_df <- data.frame()

# Loop over bases
  for (i in seq_along(bid_periods$BID_PERIOD)) { 
    
    q_master_history <- paste0("SELECT * FROM CT_MASTER_HISTORY WHERE BID_PERIOD = '", bid_periods$BID_PERIOD[i], "';")
    
    master_history_raw <- dbGetQuery(db_connection, q_master_history) %>%
      mutate(UPDATE_TIME = as.character(UPDATE_TIME),
             UPDATE_DATE = as.character(UPDATE_DATE))
    
    
    update_dt_rlv <- paste0((as_datetime(paste0(bid_periods$BID_PERIOD[i], "-24 00:00:00")) - months(1)), " 00:00:00") 

    

    fa_ut_rlv <- master_history_raw %>% 
      ungroup() %>% 
      filter(CREW_INDICATOR == "FA") %>% 
      filter(TRANSACTION_CODE %in% c("RSV", "RLV")) %>%
      mutate(update_dt = paste(UPDATE_DATE, UPDATE_TIME, sep = " ")) %>%
      filter(update_dt < update_dt_rlv) %>%
      group_by(CREW_ID, PAIRING_DATE, TRANSACTION_CODE) %>%
      mutate(temp_id = cur_group_id()) %>%
      filter(!duplicated(temp_id)) %>%
      ungroup() %>% 
      select(CREW_INDICATOR, CREW_ID, TRANSACTION_CODE,
             PAIRING_DATE, PAIRING_POSITION, BID_PERIOD, BASE) %>% 
      mutate(EQUIPMENT = "NA")
    
  fa_ut_asn <- master_history_raw %>% 
     ungroup() %>% 
     filter(CREW_INDICATOR == "FA") %>% 
     filter(TRANSACTION_CODE %in% c("ASN")) %>% 
     mutate(update_dt = paste(UPDATE_DATE, UPDATE_TIME, sep = " ")) %>%
     group_by(CREW_ID, PAIRING_DATE, TRANSACTION_CODE) %>%
     mutate(temp_id = cur_group_id()) %>%
     filter(!duplicated(temp_id)) %>%
     ungroup() %>% 
     select(CREW_INDICATOR, CREW_ID, TRANSACTION_CODE, PAIRING_NO,
            PAIRING_DATE, TO_DATE, PAIRING_POSITION, BID_PERIOD, BASE, update_dt)
  
  
  fa_ut_single <- fa_ut_asn %>% 
     group_by(CREW_ID, PAIRING_NO) %>% 
     mutate(single = if_else(PAIRING_DATE == TO_DATE, 1, 0)) %>% 
     filter(single == 1) %>% 
     pivot_longer(cols = c("PAIRING_DATE", "TO_DATE"),
                  values_to = "DATE") %>% 
     group_by(CREW_ID, TRANSACTION_CODE, DATE, PAIRING_NO) %>% 
     mutate(temp_id = cur_group_id()) %>% 
     filter(!duplicated(temp_id)) %>%
     ungroup() %>% 
     mutate(EQUIPMENT = "NA") %>% 
    rename(PAIRING_DATE = DATE) %>% 
    select(!c(PAIRING_NO, update_dt, single, name, temp_id))

  
  fa_ut_double <- fa_ut_asn %>% 
     group_by(CREW_ID, PAIRING_NO) %>% 
     mutate(single = if_else(PAIRING_DATE == TO_DATE, 1, 0)) %>% 
     filter(single == 0) %>% 
     pivot_longer(cols = c("PAIRING_DATE", "TO_DATE"),
                  values_to = "DATE") %>% 
     group_by(CREW_ID, TRANSACTION_CODE, DATE, PAIRING_NO) %>% 
     mutate(temp_id = cur_group_id()) %>% 
     filter(!duplicated(temp_id)) %>%
     ungroup() %>% 
     group_by(CREW_ID, BASE, PAIRING_NO) %>% 
     pad() %>% 
     ungroup() %>% 
    mutate(EQUIPMENT = "NA")%>% 
    rename(PAIRING_DATE = DATE) %>% 
    select(!c(PAIRING_NO, update_dt, single, name, temp_id)) %>%
    mutate(TRANSACTION_CODE = if_else(is.na(TRANSACTION_CODE), "ASN", TRANSACTION_CODE))
    #fill(CREW_INDICATOR, CREW_ID, TRANSACTION_CODE, PAIRING_POSITION, BID_PERIOD, BASE, .direction = "down")
  
   fa_ut <- rbind(fa_ut_rlv, fa_ut_single, fa_ut_double) %>% 
       filter(PAIRING_DATE <= raw_date) %>% 
       mutate(TRANSACTION_CODE = if_else(TRANSACTION_CODE == "RSV", "RLV", TRANSACTION_CODE)) %>% 
       mutate(EQUIPMENT = "NA") #%>% 

       
  ## Gold Tier Below
  
       # group_by(PAIRING_DATE, BASE, TRANSACTION_CODE) %>% 
       # summarise(DAILY_COUNT = n()) %>%  # Use summarise() instead of mutate() to avoid repeated counts
       # ungroup() %>%
       # pivot_wider(names_from = TRANSACTION_CODE, values_from = DAILY_COUNT) %>%
       # rename(RLV_SCR = RLV) %>% 
       # mutate(ASN = if_else(is.na(ASN), 0, ASN)) %>% 
       # drop_na(RLV_SCR) %>% 
       # mutate(PERCENT_UTILIZATION = round((ASN / RLV_SCR) * 100, 2)) %>% 
       # select(PAIRING_DATE, BASE, ASN, RLV_SCR, PERCENT_UTILIZATION) %>% 
       # mutate(PAIRING_POSITION = "FA") %>% 
       # relocate(PAIRING_POSITION, .before = PAIRING_DATE) %>% 
       # relocate(EQUIPMENT, .before = ASN)



    
    utl_df <- rbind(fa_ut, utl_df)
    
    
    print(paste0("Completed BID_PERIOD: ", bid_periods$BID_PERIOD[i]))
    
}

```


```{r}

# Connect to the `PLAYGROUND` database and append data if necessary
tryCatch({
  db_connection_pg <- DBI::dbConnect(odbc::odbc(),
                                     Driver = "SnowflakeDSIIDriver",
                                     Server = "hawaiianair.west-us-2.azure.snowflakecomputing.com",
                                     WAREHOUSE = "DATA_LAKE_READER",
                                     Database = "PLAYGROUND",
                                     UID = "jacob.eisaguirre@hawaiianair.com",
                                     authenticator = "externalbrowser")
  print("Database Connected!")
}, error = function(cond) {
  print("Unable to connect to Database.")
})

# Set schema and retrieve data from `AA_FINAL_PAIRING` table
dbExecute(db_connection_pg, "USE SCHEMA CREW_ANALYTICS")

dbWriteTable(db_connection_pg, "AA_RESERVE_UTILIZATION", utl_df, overwrite=T)

```

