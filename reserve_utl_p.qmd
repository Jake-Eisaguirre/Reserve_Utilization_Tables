---
title: "reserver_utl_p"
format: html
editor: source
---

```{r}
if (!require(librarian)){
  install.packages("librarian")
  library(librarian)
}

# librarian downloads, if not already downloaded, and reads in needed packages
librarian::shelf(tidyverse, here, DBI, odbc, padr)

```


```{r}
tryCatch({
    db_connection <- DBI::dbConnect(odbc::odbc(),
                             Driver="SnowflakeDSIIDriver",
                             Server="hawaiianair.west-us-2.azure.snowflakecomputing.com",
                             WAREHOUSE="DATA_LAKE_READER",
                             Database="ENTERPRISE",
                             UID= Sys.getenv("UID"), 
                             authenticator = "externalbrowser")
    print("Database Connected!")
    },
    error=function(cond) {
            print("Unable to connect to Database.")
})

# Set search_path
dbExecute(db_connection, "USE SCHEMA CREW_ANALYTICS")


q_bid_periods <- "SELECT DISTINCT BID_PERIOD FROM CT_MASTER_HISTORY ORDER BY BID_PERIOD DESC;"
bid_periods <- dbGetQuery(db_connection, q_bid_periods) %>% 
  filter(BID_PERIOD >= "2023-01",
         BID_PERIOD < "2024-10")

```

```{r}

raw_date <- Sys.Date()

utl_df <- data.frame()

# Loop over bases
  for (i in seq_along(bid_periods$BID_PERIOD)) { 
    
    q_master_history <- paste0("SELECT * FROM CT_MASTER_HISTORY WHERE BID_PERIOD = '", bid_periods$BID_PERIOD[i], "';")
    
    master_history_raw <- dbGetQuery(db_connection, q_master_history) %>%
      mutate(UPDATE_TIME = as.character(UPDATE_TIME),
             UPDATE_DATE = as.character(UPDATE_DATE))
   
     pilot_ut_scr <- master_history_raw %>% 
       ungroup() %>% 
       filter(CREW_INDICATOR == "P") %>% 
       filter(TRANSACTION_CODE %in% c("ARC", "SCR")) %>% 
       mutate(update_dt = paste(UPDATE_DATE, UPDATE_TIME, sep = " ")) %>%
       group_by(CREW_ID, PAIRING_DATE, TRANSACTION_CODE) %>%
       mutate(temp_id = cur_group_id()) %>% 
       filter(!duplicated(temp_id)) %>% 
       ungroup() %>% 
       select(CREW_INDICATOR, CREW_ID, TRANSACTION_CODE,
              PAIRING_DATE, TO_DATE, PAIRING_POSITION, BID_PERIOD, BASE)
     
     
     pilot_ut_asn <- master_history_raw %>% 
       ungroup() %>% 
       filter(CREW_INDICATOR == "P") %>% 
       filter(TRANSACTION_CODE %in% c("ASN")) %>% 
       mutate(update_dt = paste(UPDATE_DATE, UPDATE_TIME, sep = " ")) %>%
       group_by(CREW_ID, PAIRING_DATE, TRANSACTION_CODE) %>%
       mutate(temp_id = cur_group_id()) %>% 
       filter(!duplicated(temp_id)) %>% 
       ungroup() %>% 
       select(CREW_INDICATOR, CREW_ID, TRANSACTION_CODE, PAIRING_NO,
              PAIRING_DATE, TO_DATE, PAIRING_POSITION, BID_PERIOD, BASE)
     
     
     
     q_master_sched <- paste0("select CREW_ID, EFFECTIVE_FROM_DATE, EFFECTIVE_TO_DATE, EQUIPMENT, PAIRING_POSITION, BID_DATE,
                   UPDATE_DATE, UPDATE_TIME, BASE, BID_TYPE
                   from CT_MASTER_SCHEDULE WHERE BID_DATE = '", bid_periods$BID_PERIOD[i], "';")

     
     raw_ms <- dbGetQuery(db_connection, q_master_sched)
     
     clean_ms <- raw_ms %>% 
       mutate(update_dt = paste(UPDATE_DATE, UPDATE_TIME, sep = " ")) %>% 
       group_by(CREW_ID, EFFECTIVE_FROM_DATE, EFFECTIVE_TO_DATE, PAIRING_POSITION) %>% 
       filter(update_dt == max(update_dt)) %>% 
       mutate(temp_id = cur_group_id()) %>% 
       filter(!duplicated(temp_id)) %>% 
       rename(BID_PERIOD = BID_DATE) %>% 
       ungroup() %>% 
       select(CREW_ID, BID_PERIOD, PAIRING_POSITION, EQUIPMENT, BASE)
     
     
     emp_hist_p_scr <-  pilot_ut_scr %>% 
       left_join(clean_ms, by = c("CREW_ID", "BID_PERIOD", "PAIRING_POSITION", "BASE")) %>% 
       filter(PAIRING_POSITION %in% c("CA", "FO")) %>% 
       select(!c(TO_DATE))
     
     
     emp_hist_p_asn <-  pilot_ut_asn %>% 
       inner_join(clean_ms, by = c("CREW_ID", "BID_PERIOD", "PAIRING_POSITION", "BASE")) %>% 
       filter(PAIRING_POSITION %in% c("CA", "FO")) 
     
     
     asn_double <- emp_hist_p_asn %>%
       mutate(single = if_else(PAIRING_DATE == TO_DATE, 1, 0)) %>% 
       filter(single == 0) %>% 
       pivot_longer(cols = c("PAIRING_DATE", "TO_DATE"),
                    values_to = "DATE") %>% 
       group_by(CREW_ID, EQUIPMENT, TRANSACTION_CODE, DATE) %>% 
       mutate(temp_id = cur_group_id()) %>% 
       filter(!duplicated(temp_id)) %>% 
       ungroup() %>% 
       group_by(CREW_ID, TRANSACTION_CODE, EQUIPMENT, PAIRING_NO) %>% 
       pad(by='DATE') %>% 
       ungroup()%>% 
       rename(PAIRING_DATE = DATE) %>% 
       select(!c(PAIRING_NO, single, name, temp_id))  %>%
       fill(CREW_INDICATOR, CREW_ID, TRANSACTION_CODE, PAIRING_POSITION, BID_PERIOD, BASE, .direction = "down")

     asn_single <- emp_hist_p_asn %>%
       mutate(single = if_else(PAIRING_DATE == TO_DATE, 1, 0)) %>% 
       filter(single == 1) %>% 
       pivot_longer(cols = c("PAIRING_DATE", "TO_DATE"),
                    values_to = "DATE") %>% 
       group_by(CREW_ID, EQUIPMENT, TRANSACTION_CODE, DATE) %>% 
       mutate(temp_id = cur_group_id()) %>% 
       filter(!duplicated(temp_id)) %>% 
       ungroup() %>% 
       rename(PAIRING_DATE = DATE) %>% 
       select(!c(PAIRING_NO, single, name, temp_id))
     
     utl_p <- rbind(emp_hist_p_scr, asn_single, asn_double)%>% 
       filter(PAIRING_DATE <= raw_date)%>% 
       mutate(TRANSACTION_CODE = if_else(TRANSACTION_CODE == "ACR", "SCR", TRANSACTION_CODE)) %>% 
       filter(!EQUIPMENT == "33Y") %>% 
       ungroup() %>% 
       mutate(flag = if_else(PAIRING_DATE < 2024-04-31 & EQUIPMENT == 789, 1, 0)) %>% 
       filter(flag == 0) %>% 
       select(!flag) #%>% 
       
       ## Gold Tier Below
       # 
       # group_by(BASE, PAIRING_DATE, PAIRING_POSITION, EQUIPMENT, TRANSACTION_CODE) %>% 
       # summarise(DAILY_COUNT = n()) %>% 
       # ungroup() %>%
       # pivot_wider(names_from = TRANSACTION_CODE, values_from = DAILY_COUNT) %>%  
       # rename(RLV_SCR = SCR) %>% 
       # mutate(ASN = if_else(is.na(ASN), 0, ASN)) %>% 
       # mutate(PERCENT_UTILIZATION = round((ASN / RLV_SCR) * 100, 2)) %>% 
       # select(PAIRING_DATE, PAIRING_POSITION, BASE, EQUIPMENT, ASN, RLV_SCR, PERCENT_UTILIZATION)%>% 
       # # ungroup() %>% 
       # # mutate(flag = if_else(PAIRING_DATE < 2024-04-31 & EQUIPMENT == 789, 1, 0)) %>% 
       # # filter(flag == 0) %>% 
       # # select(!flag) %>% 
       # drop_na(RLV_SCR)
     
     
     utl_df <- rbind(utl_p, utl_df)
     
     print(paste("Completed BID PERIOD:", bid_periods$BID_PERIOD[i]))
         
  }
```


```{r}

# Connect to the `PLAYGROUND` database and append data if necessary
tryCatch({
  db_connection_pg <- DBI::dbConnect(odbc::odbc(),
                                     Driver = "SnowflakeDSIIDriver",
                                     Server = "hawaiianair.west-us-2.azure.snowflakecomputing.com",
                                     WAREHOUSE = "DATA_LAKE_READER",
                                     Database = "PLAYGROUND",
                                     UID = "jacob.eisaguirre@hawaiianair.com",
                                     authenticator = "externalbrowser")
  print("Database Connected!")
}, error = function(cond) {
  print("Unable to connect to Database.")
})

# Set schema and retrieve data from `AA_FINAL_PAIRING` table
dbExecute(db_connection_pg, "USE SCHEMA CREW_ANALYTICS")

dbAppendTable(db_connection_pg, "AA_RESERVE_UTILIZATION", utl_df)

```